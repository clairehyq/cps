; ModuleID = 'syringePump_orig.c'
source_filename = "syringePump_orig.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx11.0.0"

%struct.LiquidCrystalStruct = type { i32 }

@ustepsPerMM = global i64 2560, align 8
@ustepsPerML = global i64 6826, align 8
@motorDirPin = global i32 2, align 4
@motorStepPin = global i32 3, align 4
@triggerPin = global i32 0, align 4
@bigTriggerPin = global i32 0, align 4
@adc_key_val = global [5 x i32] [i32 30, i32 150, i32 360, i32 535, i32 760], align 16
@NUM_KEYS = global i32 5, align 4
@key = global i32 5, align 4
@mLBolusStepsLength = constant i32 9, align 4
@mLBolusSteps = global [9 x float] [float 0x3F50624DE0000000, float 0x3F747AE140000000, float 0x3F847AE140000000, float 0x3FA99999A0000000, float 0x3FB99999A0000000, float 5.000000e-01, float 1.000000e+00, float 5.000000e+00, float 1.000000e+01], align 16
@mLBolus = global float 5.000000e-01, align 4
@mLBigBolus = global float 1.000000e+00, align 4
@mLUsed = global float 0.000000e+00, align 4
@mLBolusStepIdx = global i32 3, align 4
@mLBolusStep = global float 0x3FA99999A0000000, align 4
@stepperPos = global i64 0, align 8
@lastKeyRepeatAt = global i64 0, align 8
@keyRepeatDelay = global i64 400, align 8
@keyDebounce = global i64 125, align 8
@prevKey = global i32 5, align 4
@uiState = global i32 0, align 4
@prevBigTrigger = global i32 0, align 4
@prevTrigger = global i32 0, align 4
@serialStr = global [80 x i8] zeroinitializer, align 16
@serialStrReady = global i8 0, align 1
@serialStrLen = global i32 0, align 4
@lcd = common global %struct.LiquidCrystalStruct zeroinitializer, align 4
@.str = private unnamed_addr constant [17 x i8] c"SyringePump v2.0\00", align 1
@.str.1 = private unnamed_addr constant [31 x i8] c"mLBolus = %f, time usecs: %lu\0A\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"Invalid command: [\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@adc_key_in = common global i32 0, align 4
@.str.4 = private unnamed_addr constant [14 x i8] c"Used %d.%d mL\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"Bolus %d.%d mL\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"Menu> BolusStep\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"%d.%d\00", align 1
@.str.8 = private unnamed_addr constant [22 x i8] c"Starting syringe pump\00", align 1
@charBuf = common global [16 x i8] zeroinitializer, align 16
@tim = common global i32 0, align 4

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @setup() #0 {
  call void @lcd_begin(%struct.LiquidCrystalStruct* @lcd, i32 16, i32 2)
  call void @lcd_clear(%struct.LiquidCrystalStruct* @lcd)
  call void @lcd_print(%struct.LiquidCrystalStruct* @lcd, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 16)
  %1 = load i32, i32* @triggerPin, align 4
  call void @pinMode(i32 %1, i32 0)
  %2 = load i32, i32* @bigTriggerPin, align 4
  call void @pinMode(i32 %2, i32 0)
  %3 = load i32, i32* @triggerPin, align 4
  call void @digitalWrite(i32 %3, i32 0)
  %4 = load i32, i32* @bigTriggerPin, align 4
  call void @digitalWrite(i32 %4, i32 0)
  %5 = load i32, i32* @motorDirPin, align 4
  call void @pinMode(i32 %5, i32 1)
  %6 = load i32, i32* @motorStepPin, align 4
  call void @pinMode(i32 %6, i32 1)
  call void @Serial_begin(i32 57600)
  ret void
}

declare void @lcd_begin(%struct.LiquidCrystalStruct*, i32, i32) #1

declare void @lcd_clear(%struct.LiquidCrystalStruct*) #1

declare void @lcd_print(%struct.LiquidCrystalStruct*, i8*, i32) #1

declare void @pinMode(i32, i32) #1

declare void @digitalWrite(i32, i32) #1

declare void @Serial_begin(i32) #1

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @loop(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i32 %0, i32* %2, align 4
  %5 = load i32, i32* %2, align 4
  %6 = sitofp i32 %5 to double
  %7 = fmul double 1.000000e-03, %6
  %8 = fptrunc double %7 to float
  store float %8, float* @mLBolus, align 4
  store i8 43, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @serialStr, i64 0, i64 0), align 16
  store i8 1, i8* @serialStrReady, align 1
  %9 = call i64 (...) @usecs()
  store i64 %9, i64* %3, align 8
  %10 = load i8, i8* @serialStrReady, align 1
  %11 = trunc i8 %10 to i1
  br i1 %11, label %12, label %13

12:                                               ; preds = %1
  call void @processSerial()
  br label %13

13:                                               ; preds = %12, %1
  %14 = call i64 (...) @usecs()
  store i64 %14, i64* %4, align 8
  %15 = load float, float* @mLBolus, align 4
  %16 = fpext float %15 to double
  %17 = load i64, i64* %4, align 8
  %18 = load i64, i64* %3, align 8
  %19 = sub i64 %17, %18
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0), double %16, i64 %19)
  ret void
}

declare i64 @usecs(...) #1

declare i32 @printf(i8*, ...) #1

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @checkTriggers() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca float, align 4
  %4 = load i32, i32* @triggerPin, align 4
  %5 = call i32 @digitalRead(i32 %4)
  store i32 %5, i32* %1, align 4
  %6 = load i32, i32* %1, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %0
  %9 = load i32, i32* @prevTrigger, align 4
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %12

11:                                               ; preds = %8
  call void @bolus(i32 0)
  call void @updateScreen()
  br label %12

12:                                               ; preds = %11, %8, %0
  %13 = load i32, i32* %1, align 4
  store i32 %13, i32* @prevTrigger, align 4
  %14 = load i32, i32* @bigTriggerPin, align 4
  %15 = call i32 @digitalRead(i32 %14)
  store i32 %15, i32* %2, align 4
  %16 = load i32, i32* %2, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %25

18:                                               ; preds = %12
  %19 = load i32, i32* @prevBigTrigger, align 4
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %25

21:                                               ; preds = %18
  %22 = load float, float* @mLBolus, align 4
  store float %22, float* %3, align 4
  %23 = load float, float* @mLBigBolus, align 4
  store float %23, float* @mLBolus, align 4
  call void @bolus(i32 0)
  %24 = load float, float* %3, align 4
  store float %24, float* @mLBolus, align 4
  call void @updateScreen()
  br label %25

25:                                               ; preds = %21, %18, %12
  %26 = load i32, i32* %2, align 4
  store i32 %26, i32* @prevBigTrigger, align 4
  ret void
}

declare i32 @digitalRead(i32) #1

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @bolus(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = alloca float, align 4
  %5 = alloca i64, align 8
  store i32 %0, i32* %2, align 4
  %6 = load float, float* @mLBolus, align 4
  %7 = load i64, i64* @ustepsPerML, align 8
  %8 = sitofp i64 %7 to float
  %9 = fmul float %6, %8
  %10 = fptosi float %9 to i64
  store i64 %10, i64* %3, align 8
  %11 = load i32, i32* %2, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %23

13:                                               ; preds = %1
  call void @led_on()
  %14 = load i32, i32* @motorDirPin, align 4
  call void @digitalWrite(i32 %14, i32 0)
  %15 = load float, float* @mLBolus, align 4
  %16 = load i64, i64* @ustepsPerML, align 8
  %17 = sitofp i64 %16 to float
  %18 = fmul float %15, %17
  %19 = fptosi float %18 to i64
  store i64 %19, i64* %3, align 8
  %20 = load float, float* @mLBolus, align 4
  %21 = load float, float* @mLUsed, align 4
  %22 = fadd float %21, %20
  store float %22, float* @mLUsed, align 4
  br label %39

23:                                               ; preds = %1
  %24 = load i32, i32* %2, align 4
  %25 = icmp eq i32 %24, 1
  br i1 %25, label %26, label %38

26:                                               ; preds = %23
  call void @led_off()
  %27 = load i32, i32* @motorDirPin, align 4
  call void @digitalWrite(i32 %27, i32 1)
  %28 = load float, float* @mLUsed, align 4
  %29 = load float, float* @mLBolus, align 4
  %30 = fsub float %28, %29
  %31 = fcmp ogt float %30, 0.000000e+00
  br i1 %31, label %32, label %36

32:                                               ; preds = %26
  %33 = load float, float* @mLBolus, align 4
  %34 = load float, float* @mLUsed, align 4
  %35 = fsub float %34, %33
  store float %35, float* @mLUsed, align 4
  br label %37

36:                                               ; preds = %26
  store float 0.000000e+00, float* @mLUsed, align 4
  br label %37

37:                                               ; preds = %36, %32
  br label %38

38:                                               ; preds = %37, %23
  br label %39

39:                                               ; preds = %38, %13
  store float 1.000000e+02, float* %4, align 4
  store i64 0, i64* %5, align 8
  br label %40

40:                                               ; preds = %49, %39
  %41 = load i64, i64* %5, align 8
  %42 = load i64, i64* %3, align 8
  %43 = icmp slt i64 %41, %42
  br i1 %43, label %44, label %52

44:                                               ; preds = %40
  %45 = load i32, i32* @motorStepPin, align 4
  call void @digitalWrite(i32 %45, i32 0)
  %46 = load float, float* %4, align 4
  call void @delayMicroseconds(float %46)
  %47 = load i32, i32* @motorStepPin, align 4
  call void @digitalWrite(i32 %47, i32 1)
  %48 = load float, float* %4, align 4
  call void @delayMicroseconds(float %48)
  br label %49

49:                                               ; preds = %44
  %50 = load i64, i64* %5, align 8
  %51 = add nsw i64 %50, 1
  store i64 %51, i64* %5, align 8
  br label %40

52:                                               ; preds = %40
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @readSerial() #0 {
  %1 = alloca i8, align 1
  br label %2

2:                                                ; preds = %19, %0
  %3 = call i32 (...) @Serial_available()
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %5, label %20

5:                                                ; preds = %2
  %6 = call i32 (...) @Serial_read()
  %7 = trunc i32 %6 to i8
  store i8 %7, i8* %1, align 1
  %8 = load i8, i8* %1, align 1
  %9 = sext i8 %8 to i32
  %10 = icmp slt i32 %9, 32
  br i1 %10, label %11, label %12

11:                                               ; preds = %5
  store i8 1, i8* @serialStrReady, align 1
  br label %19

12:                                               ; preds = %5
  %13 = load i8, i8* %1, align 1
  %14 = load i32, i32* @serialStrLen, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds [80 x i8], [80 x i8]* @serialStr, i64 0, i64 %15
  store i8 %13, i8* %16, align 1
  %17 = load i32, i32* @serialStrLen, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* @serialStrLen, align 4
  br label %19

19:                                               ; preds = %12, %11
  br label %2

20:                                               ; preds = %2
  ret void
}

declare i32 @Serial_available(...) #1

declare i32 @Serial_read(...) #1

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @processSerial() #0 {
  %1 = alloca i32, align 4
  %2 = load i8, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @serialStr, i64 0, i64 0), align 16
  %3 = sext i8 %2 to i32
  %4 = icmp eq i32 %3, 43
  br i1 %4, label %5, label %6

5:                                                ; preds = %0
  call void @bolus(i32 0)
  call void @updateScreen()
  br label %30

6:                                                ; preds = %0
  %7 = load i8, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @serialStr, i64 0, i64 0), align 16
  %8 = sext i8 %7 to i32
  %9 = icmp eq i32 %8, 45
  br i1 %9, label %10, label %11

10:                                               ; preds = %6
  call void @bolus(i32 1)
  call void @updateScreen()
  br label %29

11:                                               ; preds = %6
  %12 = load i32, i32* @serialStrLen, align 4
  %13 = call i32 @toUInt(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @serialStr, i64 0, i64 0), i32 %12)
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %23

15:                                               ; preds = %11
  %16 = load i32, i32* @serialStrLen, align 4
  %17 = call i32 @toUInt(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @serialStr, i64 0, i64 0), i32 %16)
  store i32 %17, i32* %1, align 4
  %18 = load i32, i32* %1, align 4
  %19 = sitofp i32 %18 to float
  %20 = fpext float %19 to double
  %21 = fdiv double %20, 1.000000e+03
  %22 = fptrunc double %21 to float
  store float %22, float* @mLBolus, align 4
  call void @updateScreen()
  br label %28

23:                                               ; preds = %11
  %24 = call i32 @Serial_write(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i32 18)
  %25 = load i32, i32* @serialStrLen, align 4
  %26 = call i32 @Serial_write(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @serialStr, i64 0, i64 0), i32 %25)
  %27 = call i32 @Serial_write(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32 2)
  br label %28

28:                                               ; preds = %23, %15
  br label %29

29:                                               ; preds = %28, %10
  br label %30

30:                                               ; preds = %29, %5
  store i8 0, i8* @serialStrReady, align 1
  store i32 0, i32* @serialStrLen, align 4
  ret void
}

declare i32 @toUInt(i8*, i32) #1

declare i32 @Serial_write(i8*, i32) #1

declare void @led_on() #1

declare void @led_off() #1

declare void @delayMicroseconds(float) #1

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @readKey() #0 {
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca i8, align 1
  %4 = call i32 @analogRead(i32 0)
  store i32 %4, i32* @adc_key_in, align 4
  %5 = load i32, i32* @adc_key_in, align 4
  %6 = call i32 @get_key(i32 %5)
  store i32 %6, i32* @key, align 4
  %7 = call i64 (...) @millis()
  store i64 %7, i64* %1, align 8
  %8 = load i64, i64* %1, align 8
  %9 = load i64, i64* @lastKeyRepeatAt, align 8
  %10 = sub nsw i64 %8, %9
  store i64 %10, i64* %2, align 8
  store i8 0, i8* %3, align 1
  %11 = load i32, i32* @prevKey, align 4
  %12 = load i32, i32* @key, align 4
  %13 = icmp eq i32 %11, %12
  br i1 %13, label %14, label %19

14:                                               ; preds = %0
  %15 = load i64, i64* %2, align 8
  %16 = load i64, i64* @keyRepeatDelay, align 8
  %17 = icmp sgt i64 %15, %16
  br i1 %17, label %18, label %19

18:                                               ; preds = %14
  store i8 1, i8* %3, align 1
  br label %19

19:                                               ; preds = %18, %14, %0
  %20 = load i32, i32* @prevKey, align 4
  %21 = icmp eq i32 %20, 5
  br i1 %21, label %22, label %27

22:                                               ; preds = %19
  %23 = load i64, i64* %2, align 8
  %24 = load i64, i64* @keyDebounce, align 8
  %25 = icmp sgt i64 %23, %24
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  store i8 1, i8* %3, align 1
  br label %27

27:                                               ; preds = %26, %22, %19
  %28 = load i32, i32* @key, align 4
  %29 = icmp eq i32 %28, 5
  br i1 %29, label %30, label %31

30:                                               ; preds = %27
  store i8 0, i8* %3, align 1
  br label %31

31:                                               ; preds = %30, %27
  %32 = load i32, i32* @key, align 4
  store i32 %32, i32* @prevKey, align 4
  %33 = load i8, i8* %3, align 1
  %34 = trunc i8 %33 to i1
  br i1 %34, label %35, label %38

35:                                               ; preds = %31
  %36 = load i32, i32* @key, align 4
  call void @doKeyAction(i32 %36)
  %37 = load i64, i64* %1, align 8
  store i64 %37, i64* @lastKeyRepeatAt, align 8
  br label %38

38:                                               ; preds = %35, %31
  ret void
}

declare i32 @analogRead(i32) #1

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @get_key(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  br label %5

5:                                                ; preds = %19, %1
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* @NUM_KEYS, align 4
  %8 = icmp slt i32 %6, %7
  br i1 %8, label %9, label %22

9:                                                ; preds = %5
  %10 = load i32, i32* %3, align 4
  %11 = load i32, i32* %4, align 4
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds [5 x i32], [5 x i32]* @adc_key_val, i64 0, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = icmp ult i32 %10, %14
  br i1 %15, label %16, label %18

16:                                               ; preds = %9
  %17 = load i32, i32* %4, align 4
  store i32 %17, i32* %2, align 4
  br label %29

18:                                               ; preds = %9
  br label %19

19:                                               ; preds = %18
  %20 = load i32, i32* %4, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %4, align 4
  br label %5

22:                                               ; preds = %5
  %23 = load i32, i32* %4, align 4
  %24 = load i32, i32* @NUM_KEYS, align 4
  %25 = icmp sge i32 %23, %24
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  store i32 5, i32* %4, align 4
  br label %27

27:                                               ; preds = %26, %22
  %28 = load i32, i32* %4, align 4
  store i32 %28, i32* %2, align 4
  br label %29

29:                                               ; preds = %27, %16
  %30 = load i32, i32* %2, align 4
  ret i32 %30
}

declare i64 @millis(...) #1

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @doKeyAction(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 5
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  br label %90

6:                                                ; preds = %1
  %7 = load i32, i32* %2, align 4
  %8 = icmp eq i32 %7, 4
  br i1 %8, label %9, label %15

9:                                                ; preds = %6
  %10 = load i32, i32* @uiState, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  store i32 1, i32* @uiState, align 4
  br label %14

13:                                               ; preds = %9
  store i32 0, i32* @uiState, align 4
  br label %14

14:                                               ; preds = %13, %12
  br label %15

15:                                               ; preds = %14, %6
  %16 = load i32, i32* @uiState, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %48

18:                                               ; preds = %15
  %19 = load i32, i32* %2, align 4
  %20 = icmp eq i32 %19, 3
  br i1 %20, label %21, label %22

21:                                               ; preds = %18
  call void @bolus(i32 1)
  br label %22

22:                                               ; preds = %21, %18
  %23 = load i32, i32* %2, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %22
  call void @bolus(i32 0)
  br label %26

26:                                               ; preds = %25, %22
  %27 = load i32, i32* %2, align 4
  %28 = icmp eq i32 %27, 1
  br i1 %28, label %29, label %33

29:                                               ; preds = %26
  %30 = load float, float* @mLBolusStep, align 4
  %31 = load float, float* @mLBolus, align 4
  %32 = fadd float %31, %30
  store float %32, float* @mLBolus, align 4
  br label %33

33:                                               ; preds = %29, %26
  %34 = load i32, i32* %2, align 4
  %35 = icmp eq i32 %34, 2
  br i1 %35, label %36, label %47

36:                                               ; preds = %33
  %37 = load float, float* @mLBolus, align 4
  %38 = load float, float* @mLBolusStep, align 4
  %39 = fsub float %37, %38
  %40 = fcmp ogt float %39, 0.000000e+00
  br i1 %40, label %41, label %45

41:                                               ; preds = %36
  %42 = load float, float* @mLBolusStep, align 4
  %43 = load float, float* @mLBolus, align 4
  %44 = fsub float %43, %42
  store float %44, float* @mLBolus, align 4
  br label %46

45:                                               ; preds = %36
  store float 0.000000e+00, float* @mLBolus, align 4
  br label %46

46:                                               ; preds = %45, %41
  br label %47

47:                                               ; preds = %46, %33
  br label %89

48:                                               ; preds = %15
  %49 = load i32, i32* @uiState, align 4
  %50 = icmp eq i32 %49, 1
  br i1 %50, label %51, label %88

51:                                               ; preds = %48
  %52 = load i32, i32* %2, align 4
  %53 = icmp eq i32 %52, 3
  br i1 %53, label %54, label %55

54:                                               ; preds = %51
  br label %55

55:                                               ; preds = %54, %51
  %56 = load i32, i32* %2, align 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %55
  br label %59

59:                                               ; preds = %58, %55
  %60 = load i32, i32* %2, align 4
  %61 = icmp eq i32 %60, 1
  br i1 %61, label %62, label %73

62:                                               ; preds = %59
  %63 = load i32, i32* @mLBolusStepIdx, align 4
  %64 = icmp slt i32 %63, 8
  br i1 %64, label %65, label %72

65:                                               ; preds = %62
  %66 = load i32, i32* @mLBolusStepIdx, align 4
  %67 = add nsw i32 %66, 1
  store i32 %67, i32* @mLBolusStepIdx, align 4
  %68 = load i32, i32* @mLBolusStepIdx, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [9 x float], [9 x float]* @mLBolusSteps, i64 0, i64 %69
  %71 = load float, float* %70, align 4
  store float %71, float* @mLBolusStep, align 4
  br label %72

72:                                               ; preds = %65, %62
  br label %73

73:                                               ; preds = %72, %59
  %74 = load i32, i32* %2, align 4
  %75 = icmp eq i32 %74, 2
  br i1 %75, label %76, label %87

76:                                               ; preds = %73
  %77 = load i32, i32* @mLBolusStepIdx, align 4
  %78 = icmp sgt i32 %77, 0
  br i1 %78, label %79, label %86

79:                                               ; preds = %76
  %80 = load i32, i32* @mLBolusStepIdx, align 4
  %81 = sub nsw i32 %80, 1
  store i32 %81, i32* @mLBolusStepIdx, align 4
  %82 = load i32, i32* @mLBolusStepIdx, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds [9 x float], [9 x float]* @mLBolusSteps, i64 0, i64 %83
  %85 = load float, float* %84, align 4
  store float %85, float* @mLBolusStep, align 4
  br label %86

86:                                               ; preds = %79, %76
  br label %87

87:                                               ; preds = %86, %73
  br label %88

88:                                               ; preds = %87, %48
  br label %89

89:                                               ; preds = %88, %47
  call void @updateScreen()
  br label %90

90:                                               ; preds = %89, %5
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @updateScreen() #0 {
  %1 = alloca [80 x i8], align 16
  %2 = alloca [80 x i8], align 16
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  %5 = load i32, i32* @uiState, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %36

7:                                                ; preds = %0
  %8 = getelementptr inbounds [80 x i8], [80 x i8]* %1, i64 0, i64 0
  %9 = load float, float* @mLUsed, align 4
  %10 = fptosi float %9 to i32
  %11 = load float, float* @mLUsed, align 4
  %12 = fpext float %11 to double
  %13 = fmul double %12, 1.000000e+03
  %14 = fadd double %13, 5.000000e-01
  %15 = load float, float* @mLUsed, align 4
  %16 = fptosi float %15 to i32
  %17 = sitofp i32 %16 to double
  %18 = fmul double %17, 1.000000e+03
  %19 = fsub double %14, %18
  %20 = fptosi double %19 to i32
  %21 = call i32 (i8*, i32, i64, i8*, ...) @__sprintf_chk(i8* %8, i32 0, i64 80, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i32 %10, i32 %20)
  store i32 %21, i32* %3, align 4
  %22 = getelementptr inbounds [80 x i8], [80 x i8]* %2, i64 0, i64 0
  %23 = load float, float* @mLBolus, align 4
  %24 = fptosi float %23 to i32
  %25 = load float, float* @mLBolus, align 4
  %26 = fpext float %25 to double
  %27 = fmul double %26, 1.000000e+03
  %28 = fadd double %27, 5.000000e-01
  %29 = load float, float* @mLBolus, align 4
  %30 = fptosi float %29 to i32
  %31 = sitofp i32 %30 to double
  %32 = fmul double %31, 1.000000e+03
  %33 = fsub double %28, %32
  %34 = fptosi double %33 to i32
  %35 = call i32 (i8*, i32, i64, i8*, ...) @__sprintf_chk(i8* %22, i32 0, i64 80, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0), i32 %24, i32 %34)
  store i32 %35, i32* %4, align 4
  br label %57

36:                                               ; preds = %0
  %37 = load i32, i32* @uiState, align 4
  %38 = icmp eq i32 %37, 1
  br i1 %38, label %39, label %56

39:                                               ; preds = %36
  %40 = getelementptr inbounds [80 x i8], [80 x i8]* %1, i64 0, i64 0
  %41 = call i32 (i8*, i32, i64, i8*, ...) @__sprintf_chk(i8* %40, i32 0, i64 80, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0))
  store i32 %41, i32* %3, align 4
  %42 = getelementptr inbounds [80 x i8], [80 x i8]* %2, i64 0, i64 0
  %43 = load float, float* @mLBolusStep, align 4
  %44 = fptosi float %43 to i32
  %45 = load float, float* @mLBolusStep, align 4
  %46 = fpext float %45 to double
  %47 = fmul double %46, 1.000000e+03
  %48 = fadd double %47, 5.000000e-01
  %49 = load float, float* @mLBolusStep, align 4
  %50 = fptosi float %49 to i32
  %51 = sitofp i32 %50 to double
  %52 = fmul double %51, 1.000000e+03
  %53 = fsub double %48, %52
  %54 = fptosi double %53 to i32
  %55 = call i32 (i8*, i32, i64, i8*, ...) @__sprintf_chk(i8* %42, i32 0, i64 80, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i32 %44, i32 %54)
  store i32 %55, i32* %4, align 4
  br label %56

56:                                               ; preds = %39, %36
  br label %57

57:                                               ; preds = %56, %7
  call void @lcd_clear(%struct.LiquidCrystalStruct* @lcd)
  call void @lcd_setCursor(%struct.LiquidCrystalStruct* @lcd, i32 0, i32 0)
  %58 = getelementptr inbounds [80 x i8], [80 x i8]* %1, i64 0, i64 0
  %59 = load i32, i32* %3, align 4
  call void @lcd_print(%struct.LiquidCrystalStruct* @lcd, i8* %58, i32 %59)
  call void @lcd_setCursor(%struct.LiquidCrystalStruct* @lcd, i32 0, i32 1)
  %60 = getelementptr inbounds [80 x i8], [80 x i8]* %2, i64 0, i64 0
  %61 = load i32, i32* %4, align 4
  call void @lcd_print(%struct.LiquidCrystalStruct* @lcd, i8* %60, i32 %61)
  ret void
}

declare i32 @__sprintf_chk(i8*, i32, i64, i8*, ...) #1

declare void @lcd_setCursor(%struct.LiquidCrystalStruct*, i32, i32) #1

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0))
  call void @setup()
  store i32 1, i32* %6, align 4
  br label %8

8:                                                ; preds = %11, %2
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %9, 62
  br i1 %10, label %11, label %15

11:                                               ; preds = %8
  %12 = load i32, i32* %6, align 4
  %13 = add nsw i32 %12, 10
  store i32 %13, i32* %6, align 4
  %14 = load i32, i32* %6, align 4
  call void @loop(i32 %14)
  br label %8

15:                                               ; preds = %8
  ret i32 0
}

attributes #0 = { noinline nounwind optnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "darwin-stkchk-strong-link" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "probe-stack"="___chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "darwin-stkchk-strong-link" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "probe-stack"="___chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 11, i32 3]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 7, !"PIC Level", i32 2}
!3 = !{!"Apple clang version 12.0.5 (clang-1205.0.22.11)"}
